{{>header}}

import * as SSE from '../core/sse';
import * as D from '@majkit/fp-ts-schema';
import { flow } from 'fp-ts/lib/functions';
import * as either from 'fp-ts/lib/Either';
import * as option from 'fp-ts/lib/Option';
{{#if imports}}
{{#each imports}}
import { {{{this}}} } from '../models/{{{this}}}';
{{/each}}

{{/if}}
{{#if @root.exportClient}}
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
{{else}}
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
{{/if}}

const toUndefined = flow(
	D.oneOf(
		D.object({
			'_tag': D.literal('None')
		}),
		D.object({
			'_tag': D.literal('Some'),
			'value': D.unknown
		})
	).andThen(option.toUndefined).decode,
	either.getOrElse(() => undefined),
);

{{#each operations}}

{{#if parameters}}
{{#each parameters}}
const {{{../name}}}__{{{name}}}__decoder = {{>type}};
type {{{../name}}}__{{{name}}}__type = D.Output<typeof {{{../name}}}__{{{name}}}__decoder>;
{{/each}}
{{/if}}
{{/each}}

export class {{{name}}}{{{@root.postfix}}} {
	{{#if @root.exportClient}}

	constructor(public readonly httpRequest: BaseHttpRequest) {}
	{{/if}}

	{{#each operations}}
	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * {{{escapeComment description}}}
	{{/if}}
	 */
	{{#if @root.exportClient}}
	public {{{name}}}({{>parameters}}) {
		return this.httpRequest.request({
	{{else}}
	public static {{{name}}}({{>parameters}}) {
		return __request(OpenAPI, {
	{{/if}}
			method: '{{{method}}}',
			url: '{{{path}}}',
			{{#if parametersPath}}
			path: {
				{{#each parametersPath}}
				'{{{prop}}}': toUndefined({{{name}}}),
				{{/each}}
			},
			{{/if}}
			{{#if parametersCookie}}
			cookies: {
				{{#each parametersCookie}}
				'{{{prop}}}': toUndefined({{{name}}}),
				{{/each}}
			},
			{{/if}}
			{{#if parametersHeader}}
			headers: {
				{{#each parametersHeader}}
				'{{{prop}}}': toUndefined({{{name}}}),
				{{/each}}
			},
			{{/if}}
			{{#if parametersQuery}}
			query: {
				{{#each parametersQuery}}
				'{{{prop}}}': toUndefined({{{name}}}),
				{{/each}}
			},
			{{/if}}
			{{#if parametersForm}}
			formData: {
				{{#each parametersForm}}
				'{{{prop}}}': toUndefined({{{name}}}),
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'formData'}}
			formData: {{{parametersBody.name}}},
			{{/equals}}
			{{#equals parametersBody.in 'body'}}
			body: {{{parametersBody.name}}},
			{{/equals}}
			{{#if parametersBody.mediaType}}
			mediaType: '{{{parametersBody.mediaType}}}',
			{{/if}}
			{{/if}}
			{{#if responseHeader}}
			responseHeader: '{{{responseHeader}}}',
			{{/if}}
			{{#if results}}
			decoders: {
				{{#each results}}
				{{{code}}}: {{>type}},
				{{/each}}
			},
			{{/if}}
		});
	}

	{{/each}}
}
