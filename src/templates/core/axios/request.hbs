{{>header}}

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse, AxiosInstance } from 'axios';
import FormData from 'form-data';

import * as D from '@majkit/fp-ts-schema';
import { HttpError } from './HttpError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { ApiResponse } from './ApiResponse';
import type { OpenAPIConfig } from './OpenAPI';
import { right, left } from 'fp-ts/lib/Either';
import type { TaskEither } from 'fp-ts/lib/TaskEither';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/isSuccess}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>axios/getHeaders}}


{{>axios/getRequestBody}}


{{>axios/sendRequest}}


{{>axios/getResponseHeader}}


{{>axios/getResponseBody}}


{{>functions/decodeResponse}}

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @param axiosClient The axios client instance to use
 */
export const request = <T extends Record<number,D.Decoder<unknown>>>(config: OpenAPIConfig, options: ApiRequestOptions<T>, axiosClient: AxiosInstance = axios): TaskEither<HttpError, ApiResponse<T>> => {
	return async () => {
		try {
			const url = getUrl(config, options);
			const formData = getFormData(options);
			const body = getRequestBody(options);
			const headers = await getHeaders(config, options, formData);
			const response = await sendRequest(config, options, url, body, formData, headers, axiosClient);
			const responseBody = getResponseBody(response);
			const responseHeader = getResponseHeader(response, options.responseHeader);
			const result: ApiResult = {
				url,
				ok: isSuccess(response.status),
				status: response.status,
				statusText: response.statusText,
				body: responseHeader ?? responseBody,
			};
			return right(decodeResponse(result, options));
		} catch (error) {
			return left(new HttpError(error));
		}
	};
};
