{{>header}}

import FormData from 'form-data';
import fetch, { Headers } from 'node-fetch';
import type { RequestInit, Response } from 'node-fetch';
import type { AbortSignal } from 'node-fetch/externals';

import { ApiError } from './ApiError';
import type { ApiRequestOptions, ApiResponse } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig } from './OpenAPI';
import { either } from 'fp-ts';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>node/getHeaders}}


{{>node/getRequestBody}}


{{>node/sendRequest}}


{{>node/getResponseHeader}}


{{>node/getResponseBody}}


{{>functions/catchErrorCodes}}

const flattenOption = (body: unknown): any =>
    typeof body === 'object' && body !== null && '_tag' in body && typeof body._tag === 'string'
    && (body._tag === 'None' || body._tag === 'Some')
    ? body._tag === 'Some' && 'value' in body
    ? body.value : undefined
    : body;

const convertRequestBody = (body: unknown): any =>
    typeof body === 'object' && body !== null
        ? (() => {
            const flattened = flattenOption(body);
            if (flattened === undefined) {
                return undefined;
            }
            if (Array.isArray(flattened)) {
                return flattened.map(value => convertRequestBody(value));
            }
            if (isBlob(flattened) || isFormData(flattened)) {
                return flattened;
            }
            if (typeof flattened === 'object' && flattened !== null) {
                return Object.fromEntries(Object.entries(flattened).map(([key, value]) => [key, convertRequestBody(value)]));
            }
            return flattened;
        })()
        : body;

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 */
export const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): CancelablePromise<Either<D.DecoderError | ApiError, ApiResponse<T>>> => {
	return new CancelablePromise(async (resolve, reject, onCancel) => {
		try {
			options = convertRequestBody(options);
			const url = getUrl(config, options);
			const formData = getFormData(options);
			const body = getRequestBody(options);
			const headers = await getHeaders(config, options);

			if (!onCancel.isCancelled) {
				const response = await sendRequest(options, url, body, formData, headers, onCancel);
				const responseBody = await getResponseBody(response);
				const responseHeader = getResponseHeader(response, options.responseHeader);

				const result: ApiResult = {
					url,
					ok: response.ok,
					status: response.status,
					statusText: response.statusText,
					body: responseHeader ?? responseBody,
				};

				catchErrorCodes(options, result);

				resolve(options.responseDecoders[response.status].decode(result.body));
			}
		} catch (error) {
			resolve(either.left(error as ApiError));
		}
	});
};
