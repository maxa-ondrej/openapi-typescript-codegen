// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v2 should generate: test/generated/v2/core/ApiRequestOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Decoder } from '@majkit/fp-ts-schema';

export type ApiRequestOptions<T extends Record<number,Decoder<unknown>>> = {
    readonly method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
    readonly url: string;
    readonly path?: Record<string, unknown>;
    readonly cookies?: Record<string, unknown>;
    readonly headers?: Record<string, unknown>;
    readonly query?: Record<string, unknown>;
    readonly formData?: Record<string, unknown>;
    readonly body?: unknown;
    readonly mediaType?: string;
    readonly decoders?: T;
    readonly responseHeader?: string;
    readonly errors?: Record<number, string>;
};
"
`;

exports[`v2 should generate: test/generated/v2/core/ApiResponse.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Decoder, Output, DecoderError } from '@majkit/fp-ts-schema';
import type { Either } from 'fp-ts/lib/Either';

export type ApiResponse<T extends Record<number,Decoder<unknown>>> = {
    [key in keyof T]: key extends number ? {
        readonly status: key extends 0 ? number : key;
        readonly body: Either<DecoderError, Output<T[key]>>;
    } : never;
}[keyof T];
"
`;

exports[`v2 should generate: test/generated/v2/core/ApiResult.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiResult = {
    readonly url: string;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    readonly body: unknown;
};
"
`;

exports[`v2 should generate: test/generated/v2/core/HttpError.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export class HttpError extends Error {
    cause: unknown;

    constructor(originalError: unknown) {
        super(\`\${originalError}\`);

        this.cause = originalError;
        this.name = 'HttpError';
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/core/OpenAPI.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type * as D from '@majkit/fp-ts-schema';

type Resolver<T> = (options: ApiRequestOptions<Record<number, D.Decoder<unknown>>>) => Promise<T>;
type Headers = Record<string, string>;

export type OpenAPIConfig = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    CREDENTIALS: 'include' | 'omit' | 'same-origin';
    TOKEN?: string | Resolver<string> | undefined;
    USERNAME?: string | Resolver<string> | undefined;
    PASSWORD?: string | Resolver<string> | undefined;
    HEADERS?: Headers | Resolver<Headers> | undefined;
    ENCODE_PATH?: ((path: string) => string) | undefined;
};

export const OpenAPI: OpenAPIConfig = {
    BASE: 'http://localhost:3000/base',
    VERSION: '1.0',
    WITH_CREDENTIALS: false,
    CREDENTIALS: 'include',
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ENCODE_PATH: undefined,
};
"
`;

exports[`v2 should generate: test/generated/v2/core/request.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { HttpError } from './HttpError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { ApiResponse } from './ApiResponse';
import type { OpenAPIConfig } from './OpenAPI';
import { right, left } from 'fp-ts/lib/Either';
import type { TaskEither } from 'fp-ts/lib/TaskEither';
import { either, taskEither } from 'fp-ts';
import type { Either } from 'fp-ts/lib/Either';
import type { Task } from 'fp-ts/lib/Task';
import { pipe } from 'fp-ts/lib/function';

export const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {
    return value !== undefined && value !== null;
};

export const isString = (value: unknown): value is string => {
    return typeof value === 'string';
};

export const isStringWithValue = (value: unknown): value is string => {
    return isString(value) && value !== '';
};

export const isBlob = (value: unknown): value is Blob => {
    return (
        typeof value === 'object' &&
        value !== null &&
        'type' in value &&
        'stream' in value &&
        'arrayBuffer' in value &&
        typeof value.type === 'string' &&
        typeof value.stream === 'function' &&
        typeof value.arrayBuffer === 'function' &&
        typeof value.constructor === 'function' &&
        typeof value.constructor.name === 'string' &&
        /^(Blob|File)$/.test(value.constructor.name) &&
        /^(Blob|File)$/.test(value[Symbol.toStringTag])
    );
};

export const isFormData = (value: unknown): value is FormData => {
    return value instanceof FormData;
};

export const base64 = (str: string): string => {
    try {
        return btoa(str);
    } catch (err) {
        // @ts-ignore
        return Buffer.from(str).toString('base64');
    }
};

export const getQueryString = (params: Record<string, unknown>): string => {
    const qs: string[] = [];

    const append = (key: string, value: unknown) => {
        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
    };

    const process = (key: string, value: unknown) => {
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(v => {
                    process(key, v);
                });
            } else if (typeof value === 'object' && value !== null) {
                Object.entries(value).forEach(([k, v]) => {
                    process(\`\${key}[\${k}]\`, v);
                });
            } else {
                append(key, value);
            }
        }
    };

    Object.entries(params).forEach(([key, value]) => {
        process(key, value);
    });

    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }

    return '';
};

const getUrl = <T extends Record<number,D.Decoder<unknown>>>(config: OpenAPIConfig, options: ApiRequestOptions<T>): string => {
    const encoder = config.ENCODE_PATH || encodeURI;

    const path = options.url
        .replace('{api-version}', config.VERSION)
        .replace(/{(.*?)}/g, (substring: string, group: string) => {
            if (options.path?.hasOwnProperty(group)) {
                return encoder(String(options.path[group]));
            }
            return substring;
        });

    const url = \`\${config.BASE}\${path}\`;
    if (options.query) {
        return \`\${url}\${getQueryString(options.query)}\`;
    }
    return url;
};

export const getFormData = <T extends Record<number,D.Decoder<unknown>>>(options: ApiRequestOptions<T>): FormData | undefined => {
    if (options.formData) {
        const formData = new FormData();

        const process = (key: string, value: unknown) => {
            if (isString(value) || isBlob(value)) {
                formData.append(key, value);
            } else {
                formData.append(key, JSON.stringify(value));
            }
        };

        Object.entries(options.formData)
            .filter(([_, value]) => isDefined(value))
            .forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach(v => process(key, v));
                } else {
                    process(key, value);
                }
            });

        return formData;
    }
    return undefined;
};

type Resolver<T extends Record<number,D.Decoder<unknown>>,E> = (options: ApiRequestOptions<T>) => Promise<E>;

export const resolve = async <T extends Record<number,D.Decoder<unknown>>,E>(options: ApiRequestOptions<T>, resolver?: E | Resolver<T,E>): Promise<E | undefined> => {
    if (typeof resolver === 'function') {
        return (resolver as Resolver<T,E>)(options);
    }
    return resolver;
};

export const getHeaders = async <T extends Record<number,D.Decoder<unknown>>>(config: OpenAPIConfig, options: ApiRequestOptions<T>): Promise<Headers> => {
    const token = await resolve(options, config.TOKEN);
    const username = await resolve(options, config.USERNAME);
    const password = await resolve(options, config.PASSWORD);
    const additionalHeaders = await resolve(options, config.HEADERS);

    const headers = Object.entries({
        Accept: 'application/json',
        ...additionalHeaders,
        ...options.headers,
    })
        .filter(([_, value]) => isDefined(value))
        .reduce((headers, [key, value]) => ({
            ...headers,
            [key]: String(value),
        }), {} as Record<string, string>);

    if (isStringWithValue(token)) {
        headers['Authorization'] = \`Bearer \${token}\`;
    }

    if (isStringWithValue(username) && isStringWithValue(password)) {
        const credentials = base64(\`\${username}:\${password}\`);
        headers['Authorization'] = \`Basic \${credentials}\`;
    }

    if (options.body) {
        if (options.mediaType) {
            headers['Content-Type'] = options.mediaType;
        } else if (isBlob(options.body)) {
            headers['Content-Type'] = options.body.type || 'application/octet-stream';
        } else if (isString(options.body)) {
            headers['Content-Type'] = 'text/plain';
        } else if (!isFormData(options.body)) {
            headers['Content-Type'] = 'application/json';
        }
    }

    return new Headers(headers);
};

const flattenOption = (body: unknown): unknown =>
    typeof body === 'object' && body !== null && '_tag' in body && typeof body._tag === 'string'
    && (body._tag === 'None' || body._tag === 'Some')
    ? body._tag === 'Some' && 'value' in body
    ? body.value : undefined
    : body;

const convertRequestBody = (body: unknown): unknown =>
    typeof body === 'object' && body !== null
        ? (() => {
            const flattened = flattenOption(body);
            if (flattened === undefined) {
                return undefined;
            }
            if (Array.isArray(flattened)) {
                return flattened.map(convertRequestBody);
            }
            if (isBlob(flattened) || isFormData(flattened)) {
                return flattened;
            }
            if (typeof flattened === 'object' && flattened !== null) {
                return Object.fromEntries(Object.entries(flattened).map(([key, value]) => [key, convertRequestBody(value)]));
            }
            return flattened;
        })()
        : body;

export const getRequestBody = <T extends Record<number,D.Decoder<unknown>>>(options: ApiRequestOptions<T>) => {
    if (options.body !== undefined) {
        const body = convertRequestBody(options.body);
        if (options.mediaType?.includes('/json')) {
            return JSON.stringify(body)
        } else if (isString(body) || isBlob(body) || isFormData(body)) {
            return body;
        } else {
            return JSON.stringify(body);
        }
    }
    return undefined;
};

export const sendRequest = async <T extends Record<number,D.Decoder<unknown>>>(
    config: OpenAPIConfig,
    options: ApiRequestOptions<T>,
    url: string,
    body: string | undefined | Blob | FormData,
    formData: FormData | undefined,
    headers: Headers,
): Promise<Response> => {
    const request: RequestInit = {
        headers,
        body: body ?? formData,
        method: options.method,
    };

    if (config.WITH_CREDENTIALS) {
        request.credentials = config.CREDENTIALS;
    }

    return await fetch(url, request);
};

export const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = response.headers.get(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

export const getResponseBody = async (response: Response): Promise<unknown> => {
    if (response.status !== 204) {
        try {
            const contentType = response.headers.get('Content-Type');
            if (contentType) {
                const jsonTypes = ['application/json', 'application/problem+json']
                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));
                if (isJSON) {
                    return await response.json();
                } else {
                    return await response.text();
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

const decodeResponse = <T extends Record<number,D.Decoder<unknown>>>(result: ApiResult, options: ApiRequestOptions<T>): ApiResponse<T> => {
    const decoder = options.decoders?.[result.status] ?? options.decoders?.[0] ?? D.unknown;
    const body = decoder.decode(result.body);
    return {
        status: result.status,
        body,
    } as ApiResponse<T>;
}
/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 */
export const request = <T extends Record<number,D.Decoder<unknown>>>(config: OpenAPIConfig, options: ApiRequestOptions<T>): TaskEither<HttpError, ApiResponse<T>> => {
    return async () => {
        try {
            const url = getUrl(config, options);
            const formData = getFormData(options);
            const body = getRequestBody(options);
            const headers = await getHeaders(config, options);
            const response = await sendRequest(config, options, url, body, formData, headers);
            const responseBody = await getResponseBody(response);
            const responseHeader = getResponseHeader(response, options.responseHeader);
            const result: ApiResult = {
                url,
                ok: response.ok,
                status: response.status,
                statusText: response.statusText,
                body: responseHeader ?? responseBody,
            };
            return right(decodeResponse(result, options));
        } catch (error) {
            return left(new HttpError(error));
        }
    };
};

type ErrMatcher<B> = {
    DecodeErr: (err: D.DecoderError) => B;
};

type ErrsMatcher<B> = ErrMatcher<B> & {
    HttpErr: (err: HttpError) => B;
};

type Matchers<T extends ApiResponse<Record<number, D.Decoder<unknown>>>, B> = {
    [E in T as E['status']]: E['body'] extends Either<unknown, infer X> ? ($: X) => B : never;
};

type DefMatcher<T extends ApiResponse<Record<number, D.Decoder<unknown>>>, B> = {
    _: T['body'] extends Either<unknown, infer X> ? ($: X) => B : never;
};

export const match =
    <
        T extends ApiResponse<Record<number, D.Decoder<unknown>>>,
        B,
        M extends Partial<Matchers<T, B>> & DefMatcher<T, B> & ErrMatcher<B>,
    >(
        matchers: M,
    ) =>
    (response: T): B =>
        either.isLeft(response.body)
        ? matchers.DecodeErr(response.body.left)
        : ((matchers[response.status as keyof typeof matchers] as ((d: unknown) => B) | undefined) ?? matchers._)(
            response.body.right,
            );

type TEMatchers<T extends ApiResponse<Record<number, D.Decoder<unknown>>>, B> = Matchers<T, B> &
    DefMatcher<T, B> &
    ErrsMatcher<B>;

export const matchT =
    <T extends ApiResponse<Record<number, D.Decoder<unknown>>>, M extends TEMatchers<T, unknown>>(matchers: M) =>
    (te: TaskEither<HttpError, T>) =>
        pipe(te, taskEither.match(matchers.HttpErr, match(matchers))) as Task<M extends TEMatchers<T, infer B> ? B : never>;
"
`;

exports[`v2 should generate: test/generated/v2/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export { HttpError } from './core/HttpError';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { _defaultType as _default } from './models/_default';
export type { ArrayWithArrayType as ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleansType as ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbersType as ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithPropertiesType as ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferencesType as ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStringsType as ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticksType as CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaksType as CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholdersType as CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotesType as CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharactersType as CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashesType as CommentWithSlashes } from './models/CommentWithSlashes';
export type { DateType as Date } from './models/Date';
export type { DictionaryWithArrayType as DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionaryType as DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithPropertiesType as DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReferenceType as DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithStringType as DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescriptionType as EnumFromDescription } from './models/EnumFromDescription';
export type { EnumWithExtensionsType as EnumWithExtensions } from './models/EnumWithExtensions';
export type { EnumWithNumbersType as EnumWithNumbers } from './models/EnumWithNumbers';
export type { EnumWithStringsType as EnumWithStrings } from './models/EnumWithStrings';
export type { ModelThatExtendsType as ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtendsType as ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArrayType as ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBooleanType as ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReferenceType as ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionaryType as ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImportsType as ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicatePropertiesType as ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export type { ModelWithEnumType as ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescriptionType as ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithIntegerType as ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnumsType as ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedPropertiesType as ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableStringType as ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedPropertiesType as ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPatternType as ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithPropertiesType as ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReferenceType as ModelWithReference } from './models/ModelWithReference';
export type { ModelWithStringType as ModelWithString } from './models/ModelWithString';
export type { SimpleBooleanType as SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFileType as SimpleFile } from './models/SimpleFile';
export type { SimpleIntegerType as SimpleInteger } from './models/SimpleInteger';
export type { SimpleReferenceType as SimpleReference } from './models/SimpleReference';
export type { SimpleStringType as SimpleString } from './models/SimpleString';
export type { SimpleStringWithPatternType as SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { $_default } from './schemas/$_default';
export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $Date } from './schemas/$Date';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export { CollectionFormatService } from './services/CollectionFormatService';
export { ComplexService } from './services/ComplexService';
export { DefaultService } from './services/DefaultService';
export { DefaultsService } from './services/DefaultsService';
export { DescriptionsService } from './services/DescriptionsService';
export { DuplicateService } from './services/DuplicateService';
export { ErrorService } from './services/ErrorService';
export { HeaderService } from './services/HeaderService';
export { MultipleTags1Service } from './services/MultipleTags1Service';
export { MultipleTags2Service } from './services/MultipleTags2Service';
export { MultipleTags3Service } from './services/MultipleTags3Service';
export { NoContentService } from './services/NoContentService';
export { ParametersService } from './services/ParametersService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';
"
`;

exports[`v2 should generate: test/generated/v2/models/_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const _default = D.object({
    name: D.optional(D.string),
});
export type _defaultType = D.Output<typeof _default>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ArrayWithArray = D.array(D.array(ModelWithString));
export type ArrayWithArrayType = D.Output<typeof ArrayWithArray>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ArrayWithBooleans = D.array(D.boolean);
export type ArrayWithBooleansType = D.Output<typeof ArrayWithBooleans>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ArrayWithNumbers = D.array(D.number);
export type ArrayWithNumbersType = D.Output<typeof ArrayWithNumbers>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ArrayWithProperties = D.array(D.object({
    foo: D.optional(D.string),
    bar: D.optional(D.string),
}));
export type ArrayWithPropertiesType = D.Output<typeof ArrayWithProperties>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ArrayWithReferences = D.array(ModelWithString);
export type ArrayWithReferencesType = D.Output<typeof ArrayWithReferences>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ArrayWithStrings = D.array(D.string);
export type ArrayWithStringsType = D.Output<typeof ArrayWithStrings>;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithBackticks = D.number;
export type CommentWithBackticksType = D.Output<typeof CommentWithBackticks>;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithBreaks = D.number;
export type CommentWithBreaksType = D.Output<typeof CommentWithBreaks>;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithExpressionPlaceholders = D.number;
export type CommentWithExpressionPlaceholdersType = D.Output<typeof CommentWithExpressionPlaceholders>;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithQuotes = D.number;
export type CommentWithQuotesType = D.Output<typeof CommentWithQuotes>;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithReservedCharacters = D.number;
export type CommentWithReservedCharactersType = D.Output<typeof CommentWithReservedCharacters>;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithSlashes = D.number;
export type CommentWithSlashesType = D.Output<typeof CommentWithSlashes>;
"
`;

exports[`v2 should generate: test/generated/v2/models/Date.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const Date = D.string;
export type DateType = D.Output<typeof Date>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const DictionaryWithArray = D.record(D.array(ModelWithString));
export type DictionaryWithArrayType = D.Output<typeof DictionaryWithArray>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const DictionaryWithDictionary = D.record(D.record(D.string));
export type DictionaryWithDictionaryType = D.Output<typeof DictionaryWithDictionary>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const DictionaryWithProperties = D.record(D.object({
    foo: D.optional(D.string),
    bar: D.optional(D.string),
}));
export type DictionaryWithPropertiesType = D.Output<typeof DictionaryWithProperties>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const DictionaryWithReference = D.record(ModelWithString);
export type DictionaryWithReferenceType = D.Output<typeof DictionaryWithReference>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const DictionaryWithString = D.record(D.string);
export type DictionaryWithStringType = D.Output<typeof DictionaryWithString>;
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const EnumFromDescription = D.number;
export type EnumFromDescriptionType = D.Output<typeof EnumFromDescription>;
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const EnumWithExtensions = D.literalUnion(200, 400, 500);
export type EnumWithExtensionsType = D.Output<typeof EnumWithExtensions>;
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const EnumWithNumbers = D.literalUnion(1, 2, 3, 1.1, 1.2, 1.3, 100, 200, 300, -100, -200, -300, -1.1, -1.2, -1.3);
export type EnumWithNumbersType = D.Output<typeof EnumWithNumbers>;
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const EnumWithStrings = D.literalUnion('Success', 'Warning', 'Error', '\\'Single Quote\\'', '"Double Quotes"');
export type EnumWithStringsType = D.Output<typeof EnumWithStrings>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelThatExtends = D.allOf(ModelWithString, D.object({
    propExtendsA: D.optional(D.string),
    propExtendsB: D.optional(ModelWithString),
}));
export type ModelThatExtendsType = D.Output<typeof ModelThatExtends>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelThatExtends } from './ModelThatExtends';
import { ModelWithString } from './ModelWithString';
export const ModelThatExtendsExtends = D.allOf(ModelWithString, ModelThatExtends, D.object({
    propExtendsC: D.optional(D.string),
    propExtendsD: D.optional(ModelWithString),
}));
export type ModelThatExtendsExtendsType = D.Output<typeof ModelThatExtendsExtends>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelWithArray = D.object({
    prop: D.optional(D.array(ModelWithString)),
    propWithFile: D.optional(D.array(D.createDecoder<Blob>({
        forceDecode: (data) => {
            if (data instanceof Blob) {
                return data;
            }
            throw new D.DecoderError('Expected Blob');
        },
    }))),
    propWithNumber: D.optional(D.array(D.number)),
});
export type ModelWithArrayType = D.Output<typeof ModelWithArray>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithBoolean = D.object({
    prop: D.optional(D.boolean),
});
export type ModelWithBooleanType = D.Output<typeof ModelWithBoolean>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithCircularReference = D.object({
    prop: D.optional(ModelWithCircularReference),
});
export type ModelWithCircularReferenceType = D.Output<typeof ModelWithCircularReference>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithDictionary = D.object({
    prop: D.optional(D.record(D.string)),
});
export type ModelWithDictionaryType = D.Output<typeof ModelWithDictionary>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelWithDuplicateImports = D.object({
    propA: D.optional(ModelWithString),
    propB: D.optional(ModelWithString),
    propC: D.optional(ModelWithString),
});
export type ModelWithDuplicateImportsType = D.Output<typeof ModelWithDuplicateImports>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelWithDuplicateProperties = D.object({
    prop: D.optional(ModelWithString),
});
export type ModelWithDuplicatePropertiesType = D.Output<typeof ModelWithDuplicateProperties>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithEnum = D.object({
    test: D.optional(D.literalUnion('Success', 'Warning', 'Error')),
    statusCode: D.optional(D.literalUnion('100', '200 FOO', '300 FOO_BAR', '400 foo-bar', '500 foo.bar', '600 foo&bar')),
    bool: D.optional(D.boolean),
});
export type ModelWithEnumType = D.Output<typeof ModelWithEnum>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithEnumFromDescription = D.object({
    test: D.optional(D.number),
});
export type ModelWithEnumFromDescriptionType = D.Output<typeof ModelWithEnumFromDescription>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithInteger = D.object({
    prop: D.optional(D.number),
});
export type ModelWithIntegerType = D.Output<typeof ModelWithInteger>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithNestedEnums = D.object({
    dictionaryWithEnum: D.optional(D.record(D.literalUnion('Success', 'Warning', 'Error'))),
    dictionaryWithEnumFromDescription: D.optional(D.record(D.number)),
    arrayWithEnum: D.optional(D.array(D.literalUnion('Success', 'Warning', 'Error'))),
    arrayWithDescription: D.optional(D.array(D.number)),
});
export type ModelWithNestedEnumsType = D.Output<typeof ModelWithNestedEnums>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithNestedProperties = D.object({
    first: D.object({
        second: D.object({
            third: D.string,
        }),
    }),
});
export type ModelWithNestedPropertiesType = D.Output<typeof ModelWithNestedProperties>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithNullableString = D.object({
    nullableProp: D.optional(D.nullable(D.string)),
    nullableRequiredProp: D.nullable(D.string),
});
export type ModelWithNullableStringType = D.Output<typeof ModelWithNullableString>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithOrderedProperties = D.object({
    zebra: D.optional(D.string),
    apple: D.optional(D.string),
    hawaii: D.optional(D.string),
});
export type ModelWithOrderedPropertiesType = D.Output<typeof ModelWithOrderedProperties>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithPattern = D.object({
    key: D.string,
    name: D.string,
    enabled: D.optional(D.boolean),
    modified: D.optional(D.string),
    id: D.optional(D.string),
    text: D.optional(D.string),
    patternWithSingleQuotes: D.optional(D.string),
});
export type ModelWithPatternType = D.Output<typeof ModelWithPattern>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelWithProperties = D.object({
    required: D.string,
    requiredAndReadOnly: D.string,
    string: D.optional(D.string),
    number: D.optional(D.number),
    boolean: D.optional(D.boolean),
    reference: D.optional(ModelWithString),
    'property with space': D.optional(D.string),
    default: D.optional(D.string),
    try: D.optional(D.string),
    '@namespace.string': D.optional(D.string),
    '@namespace.integer': D.optional(D.number),
});
export type ModelWithPropertiesType = D.Output<typeof ModelWithProperties>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithProperties } from './ModelWithProperties';
export const ModelWithReference = D.object({
    prop: D.optional(ModelWithProperties),
});
export type ModelWithReferenceType = D.Output<typeof ModelWithReference>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithString = D.object({
    prop: D.optional(D.string),
});
export type ModelWithStringType = D.Output<typeof ModelWithString>;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleBoolean = D.boolean;
export type SimpleBooleanType = D.Output<typeof SimpleBoolean>;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleFile = D.createDecoder<Blob>({
    forceDecode: (data) => {
        if (data instanceof Blob) {
            return data;
        }
        throw new D.DecoderError('Expected Blob');
    },
});
export type SimpleFileType = D.Output<typeof SimpleFile>;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleInteger = D.number;
export type SimpleIntegerType = D.Output<typeof SimpleInteger>;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const SimpleReference = ModelWithString;
export type SimpleReferenceType = D.Output<typeof SimpleReference>;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleString = D.string;
export type SimpleStringType = D.Output<typeof SimpleString>;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleStringWithPattern = D.string;
export type SimpleStringWithPatternType = D.Output<typeof SimpleStringWithPattern>;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $_default = {
    properties: {
        name: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\`backticks\\\` and \\\`\\\`\\\`multiple backticks\\\`\\\`\\\` should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line
    Fourth line\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\${expression} should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and "double quotes""" should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$Date.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Date = {
    type: 'string',
    description: \`This is a type-only model that defines Date as a string\`,
    format: 'string',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        properties: {
            propExtendsA: {
                type: 'string',
            },
            propExtendsB: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        type: 'ModelThatExtends',
    }, {
        properties: {
            propExtendsC: {
                type: 'string',
            },
            propExtendsD: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\d{2}-\\\\d{3}-\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\w+$',
        },
        patternWithSingleQuotes: {
            type: 'string',
            pattern: '^[a-zA-Z0-9\\']*$',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/services/CollectionFormatService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class CollectionFormatService {
    private static collectionFormatDecoder = D.object({
        parameterArrayCsv: D.array(D.string),
        parameterArraySsv: D.array(D.string),
        parameterArrayTsv: D.array(D.string),
        parameterArrayPipes: D.array(D.string),
        parameterArrayMulti: D.array(D.string),
    });
    public static collectionFormat(
        parameterArrayCsv: D.Output<typeof this.collectionFormatDecoder>['parameterArrayCsv'],
        parameterArraySsv: D.Output<typeof this.collectionFormatDecoder>['parameterArraySsv'],
        parameterArrayTsv: D.Output<typeof this.collectionFormatDecoder>['parameterArrayTsv'],
        parameterArrayPipes: D.Output<typeof this.collectionFormatDecoder>['parameterArrayPipes'],
        parameterArrayMulti: D.Output<typeof this.collectionFormatDecoder>['parameterArrayMulti'],
    ) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                'parameterArrayCSV': parameterArrayCsv,
                'parameterArraySSV': parameterArraySsv,
                'parameterArrayTSV': parameterArrayTsv,
                'parameterArrayPipes': parameterArrayPipes,
                'parameterArrayMulti': parameterArrayMulti,
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/ComplexService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelWithString } from '../models/ModelWithString';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ComplexService {
    private static complexTypesDecoder = D.object({
        parameterObject: D.object({
            first: D.optional(D.object({
                second: D.optional(D.object({
                    third: D.optional(D.string),
                })),
            })),
        }),
        parameterReference: ModelWithString,
    });
    public static complexTypes(
        parameterObject: D.Output<typeof this.complexTypesDecoder>['parameterObject'],
        parameterReference: D.Output<typeof this.complexTypesDecoder>['parameterReference'],
    ) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                'parameterObject': parameterObject,
                'parameterReference': parameterReference,
            },
            decoders: {
                200: D.array(ModelWithString),
                400: D.unknown,
                500: D.unknown,
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/DefaultService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DefaultService {
    public static serviceWithEmptyTag() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/DefaultsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelWithString } from '../models/ModelWithString';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DefaultsService {
    private static callWithDefaultParametersDecoder = D.object({
        parameterString: D.string,
        parameterNumber: D.number,
        parameterBoolean: D.boolean,
        parameterEnum: D.literalUnion('Success', 'Warning', 'Error'),
        parameterModel: ModelWithString,
    });
    public static callWithDefaultParameters(
        parameterString: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterString'] = 'Hello World!',
        parameterNumber: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterNumber'] = 123,
        parameterBoolean: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterBoolean'] = true,
        parameterEnum: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterEnum'] = 'Success',
        parameterModel: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterModel'] = {
            "prop": "Hello World!"
        },
    ) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });
    }
    private static callWithDefaultOptionalParametersDecoder = D.object({
        parameterString: D.string,
        parameterNumber: D.number,
        parameterBoolean: D.boolean,
        parameterEnum: D.literalUnion('Success', 'Warning', 'Error'),
        parameterModel: ModelWithString,
    });
    public static callWithDefaultOptionalParameters(
        parameterString: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterString'] = 'Hello World!',
        parameterNumber: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterNumber'] = 123,
        parameterBoolean: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterBoolean'] = true,
        parameterEnum: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterEnum'] = 'Success',
        parameterModel: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterModel'] = {
            "prop": "Hello World!"
        },
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });
    }
    private static callToTestOrderOfParamsDecoder = D.object({
        parameterStringWithNoDefault: D.string,
        parameterOptionalStringWithDefault: D.string,
        parameterOptionalStringWithEmptyDefault: D.string,
        parameterOptionalStringWithNoDefault: D.optional(D.string),
        parameterStringWithDefault: D.string,
        parameterStringWithEmptyDefault: D.string,
        parameterStringNullableWithNoDefault: D.optional(D.nullable(D.string)),
        parameterStringNullableWithDefault: D.nullable(D.string),
    });
    public static callToTestOrderOfParams(
        parameterStringWithNoDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringWithNoDefault'],
        parameterOptionalStringWithDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterOptionalStringWithDefault'] = 'Hello World!',
        parameterOptionalStringWithEmptyDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterOptionalStringWithEmptyDefault'] = '',
        parameterOptionalStringWithNoDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterOptionalStringWithNoDefault'] = option.none,
        parameterStringWithDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringWithDefault'] = 'Hello World!',
        parameterStringWithEmptyDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringWithEmptyDefault'] = '',
        parameterStringNullableWithNoDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringNullableWithNoDefault'] = option.none,
        parameterStringNullableWithDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringNullableWithDefault'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterOptionalStringWithDefault': parameterOptionalStringWithDefault,
                'parameterOptionalStringWithEmptyDefault': parameterOptionalStringWithEmptyDefault,
                'parameterOptionalStringWithNoDefault': parameterOptionalStringWithNoDefault,
                'parameterStringWithDefault': parameterStringWithDefault,
                'parameterStringWithEmptyDefault': parameterStringWithEmptyDefault,
                'parameterStringWithNoDefault': parameterStringWithNoDefault,
                'parameterStringNullableWithNoDefault': parameterStringNullableWithNoDefault,
                'parameterStringNullableWithDefault': parameterStringNullableWithDefault,
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/DescriptionsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DescriptionsService {
    private static callWithDescriptionsDecoder = D.object({
        parameterWithBreaks: D.optional(D.string),
        parameterWithBackticks: D.optional(D.string),
        parameterWithSlashes: D.optional(D.string),
        parameterWithExpressionPlaceholders: D.optional(D.string),
        parameterWithQuotes: D.optional(D.string),
        parameterWithReservedCharacters: D.optional(D.string),
    });
    public static callWithDescriptions(
        parameterWithBreaks: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithBreaks'] = option.none,
        parameterWithBackticks: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithBackticks'] = option.none,
        parameterWithSlashes: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithSlashes'] = option.none,
        parameterWithExpressionPlaceholders: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithExpressionPlaceholders'] = option.none,
        parameterWithQuotes: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithQuotes'] = option.none,
        parameterWithReservedCharacters: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithReservedCharacters'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                'parameterWithBreaks': parameterWithBreaks,
                'parameterWithBackticks': parameterWithBackticks,
                'parameterWithSlashes': parameterWithSlashes,
                'parameterWithExpressionPlaceholders': parameterWithExpressionPlaceholders,
                'parameterWithQuotes': parameterWithQuotes,
                'parameterWithReservedCharacters': parameterWithReservedCharacters,
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/DuplicateService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DuplicateService {
    public static duplicateName() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }
    public static duplicateName1() {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }
    public static duplicateName2() {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }
    public static duplicateName3() {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/ErrorService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ErrorService {
    private static testErrorCodeDecoder = D.object({
        status: D.string,
    });
    public static testErrorCode(
        status: D.Output<typeof this.testErrorCodeDecoder>['status'],
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                'status': status,
            },
            decoders: {
                200: D.unknown,
                500: D.unknown,
                501: D.unknown,
                502: D.unknown,
                503: D.unknown,
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/HeaderService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class HeaderService {
    public static callWithResultFromHeader() {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            decoders: {
                200: D.string,
                400: D.unknown,
                500: D.unknown,
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/MultipleTags1Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags1Service {
    public static dummyA() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
    public static dummyB() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/MultipleTags2Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags2Service {
    public static dummyA() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
    public static dummyB() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/MultipleTags3Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags3Service {
    public static dummyB() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/NoContentService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class NoContentService {
    public static callWithNoContentResponse() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/ParametersService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ParametersService {
    private static callWithParametersDecoder = D.object({
        parameterHeader: D.string,
        parameterQuery: D.string,
        parameterForm: D.string,
        parameterBody: D.string,
        parameterPath: D.string,
    });
    public static callWithParameters(
        parameterHeader: D.Output<typeof this.callWithParametersDecoder>['parameterHeader'],
        parameterQuery: D.Output<typeof this.callWithParametersDecoder>['parameterQuery'],
        parameterForm: D.Output<typeof this.callWithParametersDecoder>['parameterForm'],
        parameterBody: D.Output<typeof this.callWithParametersDecoder>['parameterBody'],
        parameterPath: D.Output<typeof this.callWithParametersDecoder>['parameterPath'],
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                'parameterPath': parameterPath,
            },
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: parameterBody,
        });
    }
    private static callWithWeirdParameterNamesDecoder = D.object({
        parameterHeader: D.string,
        parameterQuery: D.string,
        parameterForm: D.string,
        parameterBody: D.string,
        parameterPath1: D.optional(D.string),
        parameterPath2: D.optional(D.string),
        parameterPath3: D.optional(D.string),
        _default: D.optional(D.string),
    });
    public static callWithWeirdParameterNames(
        parameterHeader: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterHeader'],
        parameterQuery: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterQuery'],
        parameterForm: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterForm'],
        parameterBody: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterBody'],
        parameterPath1: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterPath1'] = option.none,
        parameterPath2: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterPath2'] = option.none,
        parameterPath3: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterPath3'] = option.none,
        _default: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['_default'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                'default': _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                'parameter_form': parameterForm,
            },
            body: parameterBody,
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/ResponseService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelThatExtends } from '../models/ModelThatExtends';
import { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import { ModelWithString } from '../models/ModelWithString';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ResponseService {
    public static callWithResponse() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
            decoders: {
                0: ModelWithString,
            },
        });
    }
    public static callWithDuplicateResponses() {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            decoders: {
                0: ModelWithString,
                201: ModelWithString,
                202: ModelWithString,
                500: ModelWithString,
                501: ModelWithString,
                502: ModelWithString,
            },
        });
    }
    public static callWithResponses() {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            decoders: {
                0: ModelWithString,
                200: D.object({
                    '@namespace.string': D.optional(D.string),
                    '@namespace.integer': D.optional(D.number),
                    value: D.optional(D.array(ModelWithString)),
                }),
                201: ModelThatExtends,
                202: ModelThatExtendsExtends,
                500: ModelWithString,
                501: ModelWithString,
                502: ModelWithString,
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/SimpleService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class SimpleService {
    public static getCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }
    public static putCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }
    public static postCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }
    public static deleteCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }
    public static optionsCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }
    public static headCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }
    public static patchCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/TypesService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class TypesService {
    private static typesDecoder = D.object({
        parameterArray: D.array(D.string),
        parameterDictionary: D.record(D.string),
        parameterEnum: D.literalUnion('Success', 'Warning', 'Error'),
        parameterNumber: D.number,
        parameterString: D.string,
        parameterBoolean: D.boolean,
        parameterObject: D.unknown,
        id: D.optional(D.number),
    });
    public static types(
        parameterArray: D.Output<typeof this.typesDecoder>['parameterArray'],
        parameterDictionary: D.Output<typeof this.typesDecoder>['parameterDictionary'],
        parameterEnum: D.Output<typeof this.typesDecoder>['parameterEnum'],
        parameterNumber: D.Output<typeof this.typesDecoder>['parameterNumber'] = 123,
        parameterString: D.Output<typeof this.typesDecoder>['parameterString'] = 'default',
        parameterBoolean: D.Output<typeof this.typesDecoder>['parameterBoolean'] = true,
        parameterObject: D.Output<typeof this.typesDecoder>['parameterObject'] = option.none,
        id: D.Output<typeof this.typesDecoder>['id'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                'id': id,
            },
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
            decoders: {
                200: D.number,
                201: D.string,
                202: D.boolean,
                203: D.unknown,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/core/ApiRequestOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Decoder } from '@majkit/fp-ts-schema';

export type ApiRequestOptions<T extends Record<number,Decoder<unknown>>> = {
    readonly method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
    readonly url: string;
    readonly path?: Record<string, unknown>;
    readonly cookies?: Record<string, unknown>;
    readonly headers?: Record<string, unknown>;
    readonly query?: Record<string, unknown>;
    readonly formData?: Record<string, unknown>;
    readonly body?: unknown;
    readonly mediaType?: string;
    readonly decoders?: T;
    readonly responseHeader?: string;
    readonly errors?: Record<number, string>;
};
"
`;

exports[`v3 should generate: test/generated/v3/core/ApiResponse.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Decoder, Output, DecoderError } from '@majkit/fp-ts-schema';
import type { Either } from 'fp-ts/lib/Either';

export type ApiResponse<T extends Record<number,Decoder<unknown>>> = {
    [key in keyof T]: key extends number ? {
        readonly status: key extends 0 ? number : key;
        readonly body: Either<DecoderError, Output<T[key]>>;
    } : never;
}[keyof T];
"
`;

exports[`v3 should generate: test/generated/v3/core/ApiResult.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiResult = {
    readonly url: string;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    readonly body: unknown;
};
"
`;

exports[`v3 should generate: test/generated/v3/core/HttpError.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export class HttpError extends Error {
    cause: unknown;

    constructor(originalError: unknown) {
        super(\`\${originalError}\`);

        this.cause = originalError;
        this.name = 'HttpError';
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/core/OpenAPI.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type * as D from '@majkit/fp-ts-schema';

type Resolver<T> = (options: ApiRequestOptions<Record<number, D.Decoder<unknown>>>) => Promise<T>;
type Headers = Record<string, string>;

export type OpenAPIConfig = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    CREDENTIALS: 'include' | 'omit' | 'same-origin';
    TOKEN?: string | Resolver<string> | undefined;
    USERNAME?: string | Resolver<string> | undefined;
    PASSWORD?: string | Resolver<string> | undefined;
    HEADERS?: Headers | Resolver<Headers> | undefined;
    ENCODE_PATH?: ((path: string) => string) | undefined;
};

export const OpenAPI: OpenAPIConfig = {
    BASE: 'http://localhost:3000/base',
    VERSION: '1.0',
    WITH_CREDENTIALS: false,
    CREDENTIALS: 'include',
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ENCODE_PATH: undefined,
};
"
`;

exports[`v3 should generate: test/generated/v3/core/request.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { HttpError } from './HttpError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { ApiResponse } from './ApiResponse';
import type { OpenAPIConfig } from './OpenAPI';
import { right, left } from 'fp-ts/lib/Either';
import type { TaskEither } from 'fp-ts/lib/TaskEither';
import { either, taskEither } from 'fp-ts';
import type { Either } from 'fp-ts/lib/Either';
import type { Task } from 'fp-ts/lib/Task';
import { pipe } from 'fp-ts/lib/function';

export const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {
    return value !== undefined && value !== null;
};

export const isString = (value: unknown): value is string => {
    return typeof value === 'string';
};

export const isStringWithValue = (value: unknown): value is string => {
    return isString(value) && value !== '';
};

export const isBlob = (value: unknown): value is Blob => {
    return (
        typeof value === 'object' &&
        value !== null &&
        'type' in value &&
        'stream' in value &&
        'arrayBuffer' in value &&
        typeof value.type === 'string' &&
        typeof value.stream === 'function' &&
        typeof value.arrayBuffer === 'function' &&
        typeof value.constructor === 'function' &&
        typeof value.constructor.name === 'string' &&
        /^(Blob|File)$/.test(value.constructor.name) &&
        /^(Blob|File)$/.test(value[Symbol.toStringTag])
    );
};

export const isFormData = (value: unknown): value is FormData => {
    return value instanceof FormData;
};

export const base64 = (str: string): string => {
    try {
        return btoa(str);
    } catch (err) {
        // @ts-ignore
        return Buffer.from(str).toString('base64');
    }
};

export const getQueryString = (params: Record<string, unknown>): string => {
    const qs: string[] = [];

    const append = (key: string, value: unknown) => {
        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
    };

    const process = (key: string, value: unknown) => {
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(v => {
                    process(key, v);
                });
            } else if (typeof value === 'object' && value !== null) {
                Object.entries(value).forEach(([k, v]) => {
                    process(\`\${key}[\${k}]\`, v);
                });
            } else {
                append(key, value);
            }
        }
    };

    Object.entries(params).forEach(([key, value]) => {
        process(key, value);
    });

    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }

    return '';
};

const getUrl = <T extends Record<number,D.Decoder<unknown>>>(config: OpenAPIConfig, options: ApiRequestOptions<T>): string => {
    const encoder = config.ENCODE_PATH || encodeURI;

    const path = options.url
        .replace('{api-version}', config.VERSION)
        .replace(/{(.*?)}/g, (substring: string, group: string) => {
            if (options.path?.hasOwnProperty(group)) {
                return encoder(String(options.path[group]));
            }
            return substring;
        });

    const url = \`\${config.BASE}\${path}\`;
    if (options.query) {
        return \`\${url}\${getQueryString(options.query)}\`;
    }
    return url;
};

export const getFormData = <T extends Record<number,D.Decoder<unknown>>>(options: ApiRequestOptions<T>): FormData | undefined => {
    if (options.formData) {
        const formData = new FormData();

        const process = (key: string, value: unknown) => {
            if (isString(value) || isBlob(value)) {
                formData.append(key, value);
            } else {
                formData.append(key, JSON.stringify(value));
            }
        };

        Object.entries(options.formData)
            .filter(([_, value]) => isDefined(value))
            .forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach(v => process(key, v));
                } else {
                    process(key, value);
                }
            });

        return formData;
    }
    return undefined;
};

type Resolver<T extends Record<number,D.Decoder<unknown>>,E> = (options: ApiRequestOptions<T>) => Promise<E>;

export const resolve = async <T extends Record<number,D.Decoder<unknown>>,E>(options: ApiRequestOptions<T>, resolver?: E | Resolver<T,E>): Promise<E | undefined> => {
    if (typeof resolver === 'function') {
        return (resolver as Resolver<T,E>)(options);
    }
    return resolver;
};

export const getHeaders = async <T extends Record<number,D.Decoder<unknown>>>(config: OpenAPIConfig, options: ApiRequestOptions<T>): Promise<Headers> => {
    const token = await resolve(options, config.TOKEN);
    const username = await resolve(options, config.USERNAME);
    const password = await resolve(options, config.PASSWORD);
    const additionalHeaders = await resolve(options, config.HEADERS);

    const headers = Object.entries({
        Accept: 'application/json',
        ...additionalHeaders,
        ...options.headers,
    })
        .filter(([_, value]) => isDefined(value))
        .reduce((headers, [key, value]) => ({
            ...headers,
            [key]: String(value),
        }), {} as Record<string, string>);

    if (isStringWithValue(token)) {
        headers['Authorization'] = \`Bearer \${token}\`;
    }

    if (isStringWithValue(username) && isStringWithValue(password)) {
        const credentials = base64(\`\${username}:\${password}\`);
        headers['Authorization'] = \`Basic \${credentials}\`;
    }

    if (options.body) {
        if (options.mediaType) {
            headers['Content-Type'] = options.mediaType;
        } else if (isBlob(options.body)) {
            headers['Content-Type'] = options.body.type || 'application/octet-stream';
        } else if (isString(options.body)) {
            headers['Content-Type'] = 'text/plain';
        } else if (!isFormData(options.body)) {
            headers['Content-Type'] = 'application/json';
        }
    }

    return new Headers(headers);
};

const flattenOption = (body: unknown): unknown =>
    typeof body === 'object' && body !== null && '_tag' in body && typeof body._tag === 'string'
    && (body._tag === 'None' || body._tag === 'Some')
    ? body._tag === 'Some' && 'value' in body
    ? body.value : undefined
    : body;

const convertRequestBody = (body: unknown): unknown =>
    typeof body === 'object' && body !== null
        ? (() => {
            const flattened = flattenOption(body);
            if (flattened === undefined) {
                return undefined;
            }
            if (Array.isArray(flattened)) {
                return flattened.map(convertRequestBody);
            }
            if (isBlob(flattened) || isFormData(flattened)) {
                return flattened;
            }
            if (typeof flattened === 'object' && flattened !== null) {
                return Object.fromEntries(Object.entries(flattened).map(([key, value]) => [key, convertRequestBody(value)]));
            }
            return flattened;
        })()
        : body;

export const getRequestBody = <T extends Record<number,D.Decoder<unknown>>>(options: ApiRequestOptions<T>) => {
    if (options.body !== undefined) {
        const body = convertRequestBody(options.body);
        if (options.mediaType?.includes('/json')) {
            return JSON.stringify(body)
        } else if (isString(body) || isBlob(body) || isFormData(body)) {
            return body;
        } else {
            return JSON.stringify(body);
        }
    }
    return undefined;
};

export const sendRequest = async <T extends Record<number,D.Decoder<unknown>>>(
    config: OpenAPIConfig,
    options: ApiRequestOptions<T>,
    url: string,
    body: string | undefined | Blob | FormData,
    formData: FormData | undefined,
    headers: Headers,
): Promise<Response> => {
    const request: RequestInit = {
        headers,
        body: body ?? formData,
        method: options.method,
    };

    if (config.WITH_CREDENTIALS) {
        request.credentials = config.CREDENTIALS;
    }

    return await fetch(url, request);
};

export const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = response.headers.get(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

export const getResponseBody = async (response: Response): Promise<unknown> => {
    if (response.status !== 204) {
        try {
            const contentType = response.headers.get('Content-Type');
            if (contentType) {
                const jsonTypes = ['application/json', 'application/problem+json']
                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));
                if (isJSON) {
                    return await response.json();
                } else {
                    return await response.text();
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

const decodeResponse = <T extends Record<number,D.Decoder<unknown>>>(result: ApiResult, options: ApiRequestOptions<T>): ApiResponse<T> => {
    const decoder = options.decoders?.[result.status] ?? options.decoders?.[0] ?? D.unknown;
    const body = decoder.decode(result.body);
    return {
        status: result.status,
        body,
    } as ApiResponse<T>;
}
/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 */
export const request = <T extends Record<number,D.Decoder<unknown>>>(config: OpenAPIConfig, options: ApiRequestOptions<T>): TaskEither<HttpError, ApiResponse<T>> => {
    return async () => {
        try {
            const url = getUrl(config, options);
            const formData = getFormData(options);
            const body = getRequestBody(options);
            const headers = await getHeaders(config, options);
            const response = await sendRequest(config, options, url, body, formData, headers);
            const responseBody = await getResponseBody(response);
            const responseHeader = getResponseHeader(response, options.responseHeader);
            const result: ApiResult = {
                url,
                ok: response.ok,
                status: response.status,
                statusText: response.statusText,
                body: responseHeader ?? responseBody,
            };
            return right(decodeResponse(result, options));
        } catch (error) {
            return left(new HttpError(error));
        }
    };
};

type ErrMatcher<B> = {
    DecodeErr: (err: D.DecoderError) => B;
};

type ErrsMatcher<B> = ErrMatcher<B> & {
    HttpErr: (err: HttpError) => B;
};

type Matchers<T extends ApiResponse<Record<number, D.Decoder<unknown>>>, B> = {
    [E in T as E['status']]: E['body'] extends Either<unknown, infer X> ? ($: X) => B : never;
};

type DefMatcher<T extends ApiResponse<Record<number, D.Decoder<unknown>>>, B> = {
    _: T['body'] extends Either<unknown, infer X> ? ($: X) => B : never;
};

export const match =
    <
        T extends ApiResponse<Record<number, D.Decoder<unknown>>>,
        B,
        M extends Partial<Matchers<T, B>> & DefMatcher<T, B> & ErrMatcher<B>,
    >(
        matchers: M,
    ) =>
    (response: T): B =>
        either.isLeft(response.body)
        ? matchers.DecodeErr(response.body.left)
        : ((matchers[response.status as keyof typeof matchers] as ((d: unknown) => B) | undefined) ?? matchers._)(
            response.body.right,
            );

type TEMatchers<T extends ApiResponse<Record<number, D.Decoder<unknown>>>, B> = Matchers<T, B> &
    DefMatcher<T, B> &
    ErrsMatcher<B>;

export const matchT =
    <T extends ApiResponse<Record<number, D.Decoder<unknown>>>, M extends TEMatchers<T, unknown>>(matchers: M) =>
    (te: TaskEither<HttpError, T>) =>
        pipe(te, taskEither.match(matchers.HttpErr, match(matchers))) as Task<M extends TEMatchers<T, infer B> ? B : never>;
"
`;

exports[`v3 should generate: test/generated/v3/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export { HttpError } from './core/HttpError';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { _defaultType as _default } from './models/_default';
export type { ArrayWithArrayType as ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleansType as ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbersType as ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithPropertiesType as ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferencesType as ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStringsType as ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticksType as CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaksType as CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholdersType as CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotesType as CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharactersType as CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashesType as CommentWithSlashes } from './models/CommentWithSlashes';
export type { CompositionBaseModelType as CompositionBaseModel } from './models/CompositionBaseModel';
export type { CompositionExtendedModelType as CompositionExtendedModel } from './models/CompositionExtendedModel';
export type { CompositionWithAllOfAndNullableType as CompositionWithAllOfAndNullable } from './models/CompositionWithAllOfAndNullable';
export type { CompositionWithAnyOfType as CompositionWithAnyOf } from './models/CompositionWithAnyOf';
export type { CompositionWithAnyOfAndNullableType as CompositionWithAnyOfAndNullable } from './models/CompositionWithAnyOfAndNullable';
export type { CompositionWithAnyOfAnonymousType as CompositionWithAnyOfAnonymous } from './models/CompositionWithAnyOfAnonymous';
export type { CompositionWithOneOfType as CompositionWithOneOf } from './models/CompositionWithOneOf';
export type { CompositionWithOneOfAndComplexArrayDictionaryType as CompositionWithOneOfAndComplexArrayDictionary } from './models/CompositionWithOneOfAndComplexArrayDictionary';
export type { CompositionWithOneOfAndNullableType as CompositionWithOneOfAndNullable } from './models/CompositionWithOneOfAndNullable';
export type { CompositionWithOneOfAndSimpleArrayDictionaryType as CompositionWithOneOfAndSimpleArrayDictionary } from './models/CompositionWithOneOfAndSimpleArrayDictionary';
export type { CompositionWithOneOfAndSimpleDictionaryType as CompositionWithOneOfAndSimpleDictionary } from './models/CompositionWithOneOfAndSimpleDictionary';
export type { CompositionWithOneOfAnonymousType as CompositionWithOneOfAnonymous } from './models/CompositionWithOneOfAnonymous';
export type { CompositionWithOneOfDiscriminatorType as CompositionWithOneOfDiscriminator } from './models/CompositionWithOneOfDiscriminator';
export type { DeprecatedModelType as DeprecatedModel } from './models/DeprecatedModel';
export type { DictionaryWithArrayType as DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionaryType as DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithPropertiesType as DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReferenceType as DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithStringType as DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescriptionType as EnumFromDescription } from './models/EnumFromDescription';
export type { EnumWithExtensionsType as EnumWithExtensions } from './models/EnumWithExtensions';
export type { EnumWithNumbersType as EnumWithNumbers } from './models/EnumWithNumbers';
export type { EnumWithStringsType as EnumWithStrings } from './models/EnumWithStrings';
export type { FileType as File } from './models/File';
export type { FreeFormObjectWithAdditionalPropertiesEqEmptyObjectType as FreeFormObjectWithAdditionalPropertiesEqEmptyObject } from './models/FreeFormObjectWithAdditionalPropertiesEqEmptyObject';
export type { FreeFormObjectWithAdditionalPropertiesEqTrueType as FreeFormObjectWithAdditionalPropertiesEqTrue } from './models/FreeFormObjectWithAdditionalPropertiesEqTrue';
export type { FreeFormObjectWithoutAdditionalPropertiesType as FreeFormObjectWithoutAdditionalProperties } from './models/FreeFormObjectWithoutAdditionalProperties';
export type { ModelCircleType as ModelCircle } from './models/ModelCircle';
export type { ModelSquareType as ModelSquare } from './models/ModelSquare';
export type { ModelThatExtendsType as ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtendsType as ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArrayType as ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBooleanType as ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReferenceType as ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionaryType as ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImportsType as ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicatePropertiesType as ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export type { ModelWithEnumType as ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescriptionType as ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithIntegerType as ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnumsType as ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedPropertiesType as ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableStringType as ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedPropertiesType as ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPatternType as ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithPropertiesType as ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReferenceType as ModelWithReference } from './models/ModelWithReference';
export type { ModelWithStringType as ModelWithString } from './models/ModelWithString';
export type { PageableType as Pageable } from './models/Pageable';
export type { SimpleBooleanType as SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFileType as SimpleFile } from './models/SimpleFile';
export type { SimpleIntegerType as SimpleInteger } from './models/SimpleInteger';
export type { SimpleParameterType as SimpleParameter } from './models/SimpleParameter';
export type { SimpleReferenceType as SimpleReference } from './models/SimpleReference';
export type { SimpleStringType as SimpleString } from './models/SimpleString';
export type { SimpleStringWithPatternType as SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { $_default } from './schemas/$_default';
export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $CompositionBaseModel } from './schemas/$CompositionBaseModel';
export { $CompositionExtendedModel } from './schemas/$CompositionExtendedModel';
export { $CompositionWithAllOfAndNullable } from './schemas/$CompositionWithAllOfAndNullable';
export { $CompositionWithAnyOf } from './schemas/$CompositionWithAnyOf';
export { $CompositionWithAnyOfAndNullable } from './schemas/$CompositionWithAnyOfAndNullable';
export { $CompositionWithAnyOfAnonymous } from './schemas/$CompositionWithAnyOfAnonymous';
export { $CompositionWithOneOf } from './schemas/$CompositionWithOneOf';
export { $CompositionWithOneOfAndComplexArrayDictionary } from './schemas/$CompositionWithOneOfAndComplexArrayDictionary';
export { $CompositionWithOneOfAndNullable } from './schemas/$CompositionWithOneOfAndNullable';
export { $CompositionWithOneOfAndSimpleArrayDictionary } from './schemas/$CompositionWithOneOfAndSimpleArrayDictionary';
export { $CompositionWithOneOfAndSimpleDictionary } from './schemas/$CompositionWithOneOfAndSimpleDictionary';
export { $CompositionWithOneOfAnonymous } from './schemas/$CompositionWithOneOfAnonymous';
export { $CompositionWithOneOfDiscriminator } from './schemas/$CompositionWithOneOfDiscriminator';
export { $DeprecatedModel } from './schemas/$DeprecatedModel';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $File } from './schemas/$File';
export { $FreeFormObjectWithAdditionalPropertiesEqEmptyObject } from './schemas/$FreeFormObjectWithAdditionalPropertiesEqEmptyObject';
export { $FreeFormObjectWithAdditionalPropertiesEqTrue } from './schemas/$FreeFormObjectWithAdditionalPropertiesEqTrue';
export { $FreeFormObjectWithoutAdditionalProperties } from './schemas/$FreeFormObjectWithoutAdditionalProperties';
export { $ModelCircle } from './schemas/$ModelCircle';
export { $ModelSquare } from './schemas/$ModelSquare';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $Pageable } from './schemas/$Pageable';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleParameter } from './schemas/$SimpleParameter';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export { CollectionFormatService } from './services/CollectionFormatService';
export { ComplexService } from './services/ComplexService';
export { DefaultService } from './services/DefaultService';
export { DefaultsService } from './services/DefaultsService';
export { DeprecatedService } from './services/DeprecatedService';
export { DescriptionsService } from './services/DescriptionsService';
export { DuplicateService } from './services/DuplicateService';
export { ErrorService } from './services/ErrorService';
export { FormDataService } from './services/FormDataService';
export { HeaderService } from './services/HeaderService';
export { MultipartService } from './services/MultipartService';
export { MultipleTags1Service } from './services/MultipleTags1Service';
export { MultipleTags2Service } from './services/MultipleTags2Service';
export { MultipleTags3Service } from './services/MultipleTags3Service';
export { NoContentService } from './services/NoContentService';
export { ParametersService } from './services/ParametersService';
export { RequestBodyService } from './services/RequestBodyService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';
export { UploadService } from './services/UploadService';
"
`;

exports[`v3 should generate: test/generated/v3/models/_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const _default = D.object({
    name: D.optional(D.string),
});
export type _defaultType = D.Output<typeof _default>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ArrayWithArray = D.array(D.array(ModelWithString));
export type ArrayWithArrayType = D.Output<typeof ArrayWithArray>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ArrayWithBooleans = D.array(D.boolean);
export type ArrayWithBooleansType = D.Output<typeof ArrayWithBooleans>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ArrayWithNumbers = D.array(D.number);
export type ArrayWithNumbersType = D.Output<typeof ArrayWithNumbers>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ArrayWithProperties = D.array(D.object({
    foo: D.optional(D.string),
    bar: D.optional(D.string),
}));
export type ArrayWithPropertiesType = D.Output<typeof ArrayWithProperties>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ArrayWithReferences = D.array(ModelWithString);
export type ArrayWithReferencesType = D.Output<typeof ArrayWithReferences>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ArrayWithStrings = D.array(D.string);
export type ArrayWithStringsType = D.Output<typeof ArrayWithStrings>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithBackticks = D.number;
export type CommentWithBackticksType = D.Output<typeof CommentWithBackticks>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithBreaks = D.number;
export type CommentWithBreaksType = D.Output<typeof CommentWithBreaks>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithExpressionPlaceholders = D.number;
export type CommentWithExpressionPlaceholdersType = D.Output<typeof CommentWithExpressionPlaceholders>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithQuotes = D.number;
export type CommentWithQuotesType = D.Output<typeof CommentWithQuotes>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithReservedCharacters = D.number;
export type CommentWithReservedCharactersType = D.Output<typeof CommentWithReservedCharacters>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CommentWithSlashes = D.number;
export type CommentWithSlashesType = D.Output<typeof CommentWithSlashes>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionBaseModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CompositionBaseModel = D.object({
    firstName: D.optional(D.string),
    lastname: D.optional(D.string),
});
export type CompositionBaseModelType = D.Output<typeof CompositionBaseModel>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionExtendedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { CompositionBaseModel } from './CompositionBaseModel';
export const CompositionExtendedModel = D.allOf(CompositionBaseModel, D.object({
    firstName: D.string,
    lastname: D.string,
    age: D.number,
}));
export type CompositionExtendedModelType = D.Output<typeof CompositionExtendedModel>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithAllOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithArray } from './ModelWithArray';
import { ModelWithDictionary } from './ModelWithDictionary';
import { ModelWithEnum } from './ModelWithEnum';
export const CompositionWithAllOfAndNullable = D.object({
    propA: D.optional(D.nullable(D.allOf(D.object({
        boolean: D.optional(D.boolean),
    }), ModelWithEnum, ModelWithArray, ModelWithDictionary))),
});
export type CompositionWithAllOfAndNullableType = D.Output<typeof CompositionWithAllOfAndNullable>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithAnyOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithArray } from './ModelWithArray';
import { ModelWithDictionary } from './ModelWithDictionary';
import { ModelWithEnum } from './ModelWithEnum';
import { ModelWithString } from './ModelWithString';
export const CompositionWithAnyOf = D.object({
    propA: D.optional(D.oneOf(ModelWithString, ModelWithEnum, ModelWithArray, ModelWithDictionary)),
});
export type CompositionWithAnyOfType = D.Output<typeof CompositionWithAnyOf>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithAnyOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithArray } from './ModelWithArray';
import { ModelWithDictionary } from './ModelWithDictionary';
import { ModelWithEnum } from './ModelWithEnum';
export const CompositionWithAnyOfAndNullable = D.object({
    propA: D.optional(D.nullable(D.oneOf(D.object({
        boolean: D.optional(D.boolean),
    }), ModelWithEnum, ModelWithArray, ModelWithDictionary))),
});
export type CompositionWithAnyOfAndNullableType = D.Output<typeof CompositionWithAnyOfAndNullable>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithAnyOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CompositionWithAnyOfAnonymous = D.object({
    propA: D.optional(D.oneOf(D.object({
        propA: D.optional(D.string),
    }), D.string, D.number)),
});
export type CompositionWithAnyOfAnonymousType = D.Output<typeof CompositionWithAnyOfAnonymous>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithArray } from './ModelWithArray';
import { ModelWithDictionary } from './ModelWithDictionary';
import { ModelWithEnum } from './ModelWithEnum';
import { ModelWithString } from './ModelWithString';
export const CompositionWithOneOf = D.object({
    propA: D.optional(D.oneOf(ModelWithString, ModelWithEnum, ModelWithArray, ModelWithDictionary)),
});
export type CompositionWithOneOfType = D.Output<typeof CompositionWithOneOf>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CompositionWithOneOfAndComplexArrayDictionary = D.object({
    propA: D.optional(D.oneOf(D.boolean, D.record(D.array(D.oneOf(D.number, D.string))))),
});
export type CompositionWithOneOfAndComplexArrayDictionaryType = D.Output<typeof CompositionWithOneOfAndComplexArrayDictionary>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithArray } from './ModelWithArray';
import { ModelWithDictionary } from './ModelWithDictionary';
import { ModelWithEnum } from './ModelWithEnum';
export const CompositionWithOneOfAndNullable = D.object({
    propA: D.optional(D.nullable(D.oneOf(D.object({
        boolean: D.optional(D.boolean),
    }), ModelWithEnum, ModelWithArray, ModelWithDictionary))),
});
export type CompositionWithOneOfAndNullableType = D.Output<typeof CompositionWithOneOfAndNullable>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CompositionWithOneOfAndSimpleArrayDictionary = D.object({
    propA: D.optional(D.oneOf(D.boolean, D.record(D.array(D.boolean)))),
});
export type CompositionWithOneOfAndSimpleArrayDictionaryType = D.Output<typeof CompositionWithOneOfAndSimpleArrayDictionary>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CompositionWithOneOfAndSimpleDictionary = D.object({
    propA: D.optional(D.oneOf(D.boolean, D.record(D.number))),
});
export type CompositionWithOneOfAndSimpleDictionaryType = D.Output<typeof CompositionWithOneOfAndSimpleDictionary>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const CompositionWithOneOfAnonymous = D.object({
    propA: D.optional(D.oneOf(D.object({
        propA: D.optional(D.string),
    }), D.string, D.number)),
});
export type CompositionWithOneOfAnonymousType = D.Output<typeof CompositionWithOneOfAnonymous>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfDiscriminator.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelCircle } from './ModelCircle';
import { ModelSquare } from './ModelSquare';
export const CompositionWithOneOfDiscriminator = D.oneOf(ModelCircle, ModelSquare);
export type CompositionWithOneOfDiscriminatorType = D.Output<typeof CompositionWithOneOfDiscriminator>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DeprecatedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const DeprecatedModel = D.object({
    prop: D.optional(D.string),
});
export type DeprecatedModelType = D.Output<typeof DeprecatedModel>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const DictionaryWithArray = D.record(D.array(ModelWithString));
export type DictionaryWithArrayType = D.Output<typeof DictionaryWithArray>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const DictionaryWithDictionary = D.record(D.record(D.string));
export type DictionaryWithDictionaryType = D.Output<typeof DictionaryWithDictionary>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const DictionaryWithProperties = D.record(D.object({
    foo: D.optional(D.string),
    bar: D.optional(D.string),
}));
export type DictionaryWithPropertiesType = D.Output<typeof DictionaryWithProperties>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const DictionaryWithReference = D.record(ModelWithString);
export type DictionaryWithReferenceType = D.Output<typeof DictionaryWithReference>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const DictionaryWithString = D.record(D.string);
export type DictionaryWithStringType = D.Output<typeof DictionaryWithString>;
"
`;

exports[`v3 should generate: test/generated/v3/models/EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const EnumFromDescription = D.number;
export type EnumFromDescriptionType = D.Output<typeof EnumFromDescription>;
"
`;

exports[`v3 should generate: test/generated/v3/models/EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const EnumWithExtensions = D.literalUnion(200, 400, 500);
export type EnumWithExtensionsType = D.Output<typeof EnumWithExtensions>;
"
`;

exports[`v3 should generate: test/generated/v3/models/EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const EnumWithNumbers = D.literalUnion(1, 2, 3, 1.1, 1.2, 1.3, 100, 200, 300, -100, -200, -300, -1.1, -1.2, -1.3);
export type EnumWithNumbersType = D.Output<typeof EnumWithNumbers>;
"
`;

exports[`v3 should generate: test/generated/v3/models/EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const EnumWithStrings = D.literalUnion('Success', 'Warning', 'Error', '\\'Single Quote\\'', '"Double Quotes"');
export type EnumWithStringsType = D.Output<typeof EnumWithStrings>;
"
`;

exports[`v3 should generate: test/generated/v3/models/File.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const File = D.object({
    id: D.optional(D.string),
    updated_at: D.optional(D.string),
    created_at: D.optional(D.string),
    mime: D.string,
    file: D.optional(D.string),
});
export type FileType = D.Output<typeof File>;
"
`;

exports[`v3 should generate: test/generated/v3/models/FreeFormObjectWithAdditionalPropertiesEqEmptyObject.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const FreeFormObjectWithAdditionalPropertiesEqEmptyObject = D.record(D.unknown);
export type FreeFormObjectWithAdditionalPropertiesEqEmptyObjectType = D.Output<typeof FreeFormObjectWithAdditionalPropertiesEqEmptyObject>;
"
`;

exports[`v3 should generate: test/generated/v3/models/FreeFormObjectWithAdditionalPropertiesEqTrue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const FreeFormObjectWithAdditionalPropertiesEqTrue = D.record(D.unknown);
export type FreeFormObjectWithAdditionalPropertiesEqTrueType = D.Output<typeof FreeFormObjectWithAdditionalPropertiesEqTrue>;
"
`;

exports[`v3 should generate: test/generated/v3/models/FreeFormObjectWithoutAdditionalProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const FreeFormObjectWithoutAdditionalProperties = D.record(D.unknown);
export type FreeFormObjectWithoutAdditionalPropertiesType = D.Output<typeof FreeFormObjectWithoutAdditionalProperties>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelCircle.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelCircle = D.object({
    kind: 'circle',
    radius: D.optional(D.number),
});
export type ModelCircleType = D.Output<typeof ModelCircle>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelSquare.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelSquare = D.object({
    kind: 'square',
    sideLength: D.optional(D.number),
});
export type ModelSquareType = D.Output<typeof ModelSquare>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelThatExtends = D.allOf(ModelWithString, D.object({
    propExtendsA: D.optional(D.string),
    propExtendsB: D.optional(ModelWithString),
}));
export type ModelThatExtendsType = D.Output<typeof ModelThatExtends>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelThatExtends } from './ModelThatExtends';
import { ModelWithString } from './ModelWithString';
export const ModelThatExtendsExtends = D.allOf(ModelWithString, ModelThatExtends, D.object({
    propExtendsC: D.optional(D.string),
    propExtendsD: D.optional(ModelWithString),
}));
export type ModelThatExtendsExtendsType = D.Output<typeof ModelThatExtendsExtends>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelWithArray = D.object({
    prop: D.optional(D.array(ModelWithString)),
    propWithFile: D.optional(D.array(D.createDecoder<Blob>({
        forceDecode: (data) => {
            if (data instanceof Blob) {
                return data;
            }
            throw new D.DecoderError('Expected Blob');
        },
    }))),
    propWithNumber: D.optional(D.array(D.number)),
});
export type ModelWithArrayType = D.Output<typeof ModelWithArray>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithBoolean = D.object({
    prop: D.optional(D.boolean),
});
export type ModelWithBooleanType = D.Output<typeof ModelWithBoolean>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithCircularReference = D.object({
    prop: D.optional(ModelWithCircularReference),
});
export type ModelWithCircularReferenceType = D.Output<typeof ModelWithCircularReference>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithDictionary = D.object({
    prop: D.optional(D.record(D.string)),
});
export type ModelWithDictionaryType = D.Output<typeof ModelWithDictionary>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelWithDuplicateImports = D.object({
    propA: D.optional(ModelWithString),
    propB: D.optional(ModelWithString),
    propC: D.optional(ModelWithString),
});
export type ModelWithDuplicateImportsType = D.Output<typeof ModelWithDuplicateImports>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelWithDuplicateProperties = D.object({
    prop: D.optional(ModelWithString),
});
export type ModelWithDuplicatePropertiesType = D.Output<typeof ModelWithDuplicateProperties>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithEnum = D.object({
    test: D.optional(D.literalUnion('Success', 'Warning', 'Error')),
    statusCode: D.optional(D.literalUnion('100', '200 FOO', '300 FOO_BAR', '400 foo-bar', '500 foo.bar', '600 foo&bar')),
    bool: D.optional(D.boolean),
});
export type ModelWithEnumType = D.Output<typeof ModelWithEnum>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithEnumFromDescription = D.object({
    test: D.optional(D.number),
});
export type ModelWithEnumFromDescriptionType = D.Output<typeof ModelWithEnumFromDescription>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithInteger = D.object({
    prop: D.optional(D.number),
});
export type ModelWithIntegerType = D.Output<typeof ModelWithInteger>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithNestedEnums = D.object({
    dictionaryWithEnum: D.optional(D.record(D.literalUnion('Success', 'Warning', 'Error'))),
    dictionaryWithEnumFromDescription: D.optional(D.record(D.number)),
    arrayWithEnum: D.optional(D.array(D.literalUnion('Success', 'Warning', 'Error'))),
    arrayWithDescription: D.optional(D.array(D.number)),
});
export type ModelWithNestedEnumsType = D.Output<typeof ModelWithNestedEnums>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithNestedProperties = D.object({
    first: D.nullable(D.object({
        second: D.nullable(D.object({
            third: D.nullable(D.string),
        })),
    })),
});
export type ModelWithNestedPropertiesType = D.Output<typeof ModelWithNestedProperties>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithNullableString = D.object({
    nullableProp1: D.optional(D.nullable(D.string)),
    nullableRequiredProp1: D.nullable(D.string),
    nullableProp2: D.optional(D.nullable(D.string)),
    nullableRequiredProp2: D.nullable(D.string),
});
export type ModelWithNullableStringType = D.Output<typeof ModelWithNullableString>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithOrderedProperties = D.object({
    zebra: D.optional(D.string),
    apple: D.optional(D.string),
    hawaii: D.optional(D.string),
});
export type ModelWithOrderedPropertiesType = D.Output<typeof ModelWithOrderedProperties>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithPattern = D.object({
    key: D.string,
    name: D.string,
    enabled: D.optional(D.boolean),
    modified: D.optional(D.string),
    id: D.optional(D.string),
    text: D.optional(D.string),
    patternWithSingleQuotes: D.optional(D.string),
});
export type ModelWithPatternType = D.Output<typeof ModelWithPattern>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const ModelWithProperties = D.object({
    required: D.string,
    requiredAndReadOnly: D.string,
    requiredAndNullable: D.nullable(D.string),
    string: D.optional(D.string),
    number: D.optional(D.number),
    boolean: D.optional(D.boolean),
    reference: D.optional(ModelWithString),
    'property with space': D.optional(D.string),
    default: D.optional(D.string),
    try: D.optional(D.string),
    '@namespace.string': D.optional(D.string),
    '@namespace.integer': D.optional(D.number),
});
export type ModelWithPropertiesType = D.Output<typeof ModelWithProperties>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithProperties } from './ModelWithProperties';
export const ModelWithReference = D.object({
    prop: D.optional(ModelWithProperties),
});
export type ModelWithReferenceType = D.Output<typeof ModelWithReference>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const ModelWithString = D.object({
    prop: D.optional(D.string),
});
export type ModelWithStringType = D.Output<typeof ModelWithString>;
"
`;

exports[`v3 should generate: test/generated/v3/models/Pageable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const Pageable = D.object({
    page: D.optional(D.number),
    size: D.optional(D.number),
    sort: D.optional(D.array(D.string)),
});
export type PageableType = D.Output<typeof Pageable>;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleBoolean = D.boolean;
export type SimpleBooleanType = D.Output<typeof SimpleBoolean>;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleFile = D.createDecoder<Blob>({
    forceDecode: (data) => {
        if (data instanceof Blob) {
            return data;
        }
        throw new D.DecoderError('Expected Blob');
    },
});
export type SimpleFileType = D.Output<typeof SimpleFile>;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleInteger = D.number;
export type SimpleIntegerType = D.Output<typeof SimpleInteger>;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleParameter = D.string;
export type SimpleParameterType = D.Output<typeof SimpleParameter>;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { ModelWithString } from './ModelWithString';
export const SimpleReference = ModelWithString;
export type SimpleReferenceType = D.Output<typeof SimpleReference>;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleString = D.string;
export type SimpleStringType = D.Output<typeof SimpleString>;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
export const SimpleStringWithPattern = D.nullable(D.string);
export type SimpleStringWithPatternType = D.Output<typeof SimpleStringWithPattern>;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $_default = {
    properties: {
        name: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\`backticks\\\` and \\\`\\\`\\\`multiple backticks\\\`\\\`\\\` should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line
    Fourth line\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\${expression} should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and "double quotes""" should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionBaseModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionBaseModel = {
    description: \`This is a base model with two simple optional properties\`,
    properties: {
        firstName: {
            type: 'string',
        },
        lastname: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionExtendedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionExtendedModel = {
    type: 'all-of',
    description: \`This is a model that extends the base model\`,
    contains: [{
        type: 'CompositionBaseModel',
    }, {
        properties: {
            firstName: {
                type: 'string',
                isRequired: true,
            },
            lastname: {
                type: 'string',
                isRequired: true,
            },
            age: {
                type: 'number',
                isRequired: true,
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithAllOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAllOfAndNullable = {
    description: \`This is a model with one property with a 'all of' relationship\`,
    properties: {
        propA: {
            type: 'all-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithAnyOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOf = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithAnyOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOfAndNullable = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithAnyOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOfAnonymous = {
    description: \`This is a model with one property with a 'any of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOf = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndComplexArrayDictionary = {
    description: \`This is a model that contains a dictionary of complex arrays (composited) within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'one-of',
                        contains: [{
                            type: 'number',
                        }, {
                            type: 'string',
                        }],
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndNullable = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndSimpleArrayDictionary = {
    description: \`This is a model that contains a dictionary of simple arrays within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'boolean',
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndSimpleDictionary = {
    description: \`This is a model that contains a simple dictionary within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'number',
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAnonymous = {
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfDiscriminator.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfDiscriminator = {
    type: 'one-of',
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    contains: [{
        type: 'ModelCircle',
    }, {
        type: 'ModelSquare',
    }],
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DeprecatedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DeprecatedModel = {
    description: \`This is a deprecated model with a deprecated property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a deprecated property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$File.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $File = {
    properties: {
        id: {
            type: 'string',
            isReadOnly: true,
            minLength: 1,
        },
        updated_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        created_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        mime: {
            type: 'string',
            isRequired: true,
            maxLength: 24,
            minLength: 1,
        },
        file: {
            type: 'string',
            isReadOnly: true,
            format: 'uri',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$FreeFormObjectWithAdditionalPropertiesEqEmptyObject.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FreeFormObjectWithAdditionalPropertiesEqEmptyObject = {
    type: 'dictionary',
    contains: {
        properties: {
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$FreeFormObjectWithAdditionalPropertiesEqTrue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FreeFormObjectWithAdditionalPropertiesEqTrue = {
    type: 'dictionary',
    contains: {
        properties: {
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$FreeFormObjectWithoutAdditionalProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FreeFormObjectWithoutAdditionalProperties = {
    type: 'dictionary',
    contains: {
        properties: {
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelCircle.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelCircle = {
    description: \`Circle\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        radius: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelSquare.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelSquare = {
    description: \`Square\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        sideLength: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        properties: {
            propExtendsA: {
                type: 'string',
            },
            propExtendsB: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        type: 'ModelThatExtends',
    }, {
        properties: {
            propExtendsC: {
                type: 'string',
            },
            propExtendsD: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                            isNullable: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                    isNullable: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
        nullableProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\d{2}-\\\\d{3}-\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\w+$',
        },
        patternWithSingleQuotes: {
            type: 'string',
            pattern: '^[a-zA-Z0-9\\']*$',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        requiredAndNullable: {
            type: 'string',
            isRequired: true,
            isNullable: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$Pageable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Pageable = {
    properties: {
        page: {
            type: 'number',
            format: 'int32',
        },
        size: {
            type: 'number',
            format: 'int32',
            minimum: 1,
        },
        sort: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleParameter = {
    type: 'string',
    description: \`This is a reusable parameter\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    isNullable: true,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/services/CollectionFormatService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class CollectionFormatService {
    private static collectionFormatDecoder = D.object({
        parameterArrayCsv: D.nullable(D.array(D.string)),
        parameterArraySsv: D.nullable(D.array(D.string)),
        parameterArrayTsv: D.nullable(D.array(D.string)),
        parameterArrayPipes: D.nullable(D.array(D.string)),
        parameterArrayMulti: D.nullable(D.array(D.string)),
    });
    public static collectionFormat(
        parameterArrayCsv: D.Output<typeof this.collectionFormatDecoder>['parameterArrayCsv'],
        parameterArraySsv: D.Output<typeof this.collectionFormatDecoder>['parameterArraySsv'],
        parameterArrayTsv: D.Output<typeof this.collectionFormatDecoder>['parameterArrayTsv'],
        parameterArrayPipes: D.Output<typeof this.collectionFormatDecoder>['parameterArrayPipes'],
        parameterArrayMulti: D.Output<typeof this.collectionFormatDecoder>['parameterArrayMulti'],
    ) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                'parameterArrayCSV': parameterArrayCsv,
                'parameterArraySSV': parameterArraySsv,
                'parameterArrayTSV': parameterArrayTsv,
                'parameterArrayPipes': parameterArrayPipes,
                'parameterArrayMulti': parameterArrayMulti,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/ComplexService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelWithArray } from '../models/ModelWithArray';
import { ModelWithDictionary } from '../models/ModelWithDictionary';
import { ModelWithEnum } from '../models/ModelWithEnum';
import { ModelWithString } from '../models/ModelWithString';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ComplexService {
    private static complexTypesDecoder = D.object({
        parameterObject: D.object({
            first: D.optional(D.object({
                second: D.optional(D.object({
                    third: D.optional(D.string),
                })),
            })),
        }),
        parameterReference: ModelWithString,
    });
    public static complexTypes(
        parameterObject: D.Output<typeof this.complexTypesDecoder>['parameterObject'],
        parameterReference: D.Output<typeof this.complexTypesDecoder>['parameterReference'],
    ) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                'parameterObject': parameterObject,
                'parameterReference': parameterReference,
            },
            decoders: {
                200: D.array(ModelWithString),
                400: D.unknown,
                500: D.unknown,
            },
        });
    }
    private static complexParamsDecoder = D.object({
        id: D.number,
        requestBody: D.optional(D.object({
            key: D.nullable(D.string),
            name: D.nullable(D.string),
            enabled: D.optional(D.boolean),
            type: D.literalUnion('Monkey', 'Horse', 'Bird'),
            listOfModels: D.optional(D.nullable(D.array(ModelWithString))),
            listOfStrings: D.optional(D.nullable(D.array(D.string))),
            parameters: D.oneOf(ModelWithString, ModelWithEnum, ModelWithArray, ModelWithDictionary),
            user: D.optional(D.object({
                id: D.optional(D.number),
                name: D.optional(D.nullable(D.string)),
            })),
        })),
    });
    public static complexParams(
        id: D.Output<typeof this.complexParamsDecoder>['id'],
        requestBody: D.Output<typeof this.complexParamsDecoder>['requestBody'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/complex/{id}',
            path: {
                'id': id,
            },
            body: requestBody,
            mediaType: 'application/json-patch+json',
            decoders: {
                200: ModelWithString,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DefaultService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DefaultService {
    public static serviceWithEmptyTag() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DefaultsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelWithString } from '../models/ModelWithString';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DefaultsService {
    private static callWithDefaultParametersDecoder = D.object({
        parameterString: D.nullable(D.string),
        parameterNumber: D.nullable(D.number),
        parameterBoolean: D.nullable(D.boolean),
        parameterEnum: D.literalUnion('Success', 'Warning', 'Error'),
        parameterModel: D.nullable(ModelWithString),
    });
    public static callWithDefaultParameters(
        parameterString: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterString'] = 'Hello World!',
        parameterNumber: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterNumber'] = 123,
        parameterBoolean: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterBoolean'] = true,
        parameterEnum: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterEnum'] = 'Success',
        parameterModel: D.Output<typeof this.callWithDefaultParametersDecoder>['parameterModel'] = {
            "prop": "Hello World!"
        },
    ) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });
    }
    private static callWithDefaultOptionalParametersDecoder = D.object({
        parameterString: D.string,
        parameterNumber: D.number,
        parameterBoolean: D.boolean,
        parameterEnum: D.literalUnion('Success', 'Warning', 'Error'),
        parameterModel: ModelWithString,
    });
    public static callWithDefaultOptionalParameters(
        parameterString: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterString'] = 'Hello World!',
        parameterNumber: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterNumber'] = 123,
        parameterBoolean: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterBoolean'] = true,
        parameterEnum: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterEnum'] = 'Success',
        parameterModel: D.Output<typeof this.callWithDefaultOptionalParametersDecoder>['parameterModel'] = {
            "prop": "Hello World!"
        },
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });
    }
    private static callToTestOrderOfParamsDecoder = D.object({
        parameterStringWithNoDefault: D.string,
        parameterOptionalStringWithDefault: D.string,
        parameterOptionalStringWithEmptyDefault: D.string,
        parameterOptionalStringWithNoDefault: D.optional(D.string),
        parameterStringWithDefault: D.string,
        parameterStringWithEmptyDefault: D.string,
        parameterStringNullableWithNoDefault: D.optional(D.nullable(D.string)),
        parameterStringNullableWithDefault: D.nullable(D.string),
    });
    public static callToTestOrderOfParams(
        parameterStringWithNoDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringWithNoDefault'],
        parameterOptionalStringWithDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterOptionalStringWithDefault'] = 'Hello World!',
        parameterOptionalStringWithEmptyDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterOptionalStringWithEmptyDefault'] = '',
        parameterOptionalStringWithNoDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterOptionalStringWithNoDefault'] = option.none,
        parameterStringWithDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringWithDefault'] = 'Hello World!',
        parameterStringWithEmptyDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringWithEmptyDefault'] = '',
        parameterStringNullableWithNoDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringNullableWithNoDefault'] = option.none,
        parameterStringNullableWithDefault: D.Output<typeof this.callToTestOrderOfParamsDecoder>['parameterStringNullableWithDefault'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterOptionalStringWithDefault': parameterOptionalStringWithDefault,
                'parameterOptionalStringWithEmptyDefault': parameterOptionalStringWithEmptyDefault,
                'parameterOptionalStringWithNoDefault': parameterOptionalStringWithNoDefault,
                'parameterStringWithDefault': parameterStringWithDefault,
                'parameterStringWithEmptyDefault': parameterStringWithEmptyDefault,
                'parameterStringWithNoDefault': parameterStringWithNoDefault,
                'parameterStringNullableWithNoDefault': parameterStringNullableWithNoDefault,
                'parameterStringNullableWithDefault': parameterStringNullableWithDefault,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DeprecatedService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { DeprecatedModel } from '../models/DeprecatedModel';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DeprecatedService {
    private static deprecatedCallDecoder = D.object({
        parameter: D.nullable(DeprecatedModel),
    });
    public static deprecatedCall(
        parameter: D.Output<typeof this.deprecatedCallDecoder>['parameter'],
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/deprecated',
            headers: {
                'parameter': parameter,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DescriptionsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DescriptionsService {
    private static callWithDescriptionsDecoder = D.object({
        parameterWithBreaks: D.optional(D.unknown),
        parameterWithBackticks: D.optional(D.unknown),
        parameterWithSlashes: D.optional(D.unknown),
        parameterWithExpressionPlaceholders: D.optional(D.unknown),
        parameterWithQuotes: D.optional(D.unknown),
        parameterWithReservedCharacters: D.optional(D.unknown),
    });
    public static callWithDescriptions(
        parameterWithBreaks: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithBreaks'] = option.none,
        parameterWithBackticks: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithBackticks'] = option.none,
        parameterWithSlashes: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithSlashes'] = option.none,
        parameterWithExpressionPlaceholders: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithExpressionPlaceholders'] = option.none,
        parameterWithQuotes: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithQuotes'] = option.none,
        parameterWithReservedCharacters: D.Output<typeof this.callWithDescriptionsDecoder>['parameterWithReservedCharacters'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                'parameterWithBreaks': parameterWithBreaks,
                'parameterWithBackticks': parameterWithBackticks,
                'parameterWithSlashes': parameterWithSlashes,
                'parameterWithExpressionPlaceholders': parameterWithExpressionPlaceholders,
                'parameterWithQuotes': parameterWithQuotes,
                'parameterWithReservedCharacters': parameterWithReservedCharacters,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DuplicateService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DuplicateService {
    public static duplicateName() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }
    public static duplicateName1() {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }
    public static duplicateName2() {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }
    public static duplicateName3() {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/ErrorService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ErrorService {
    private static testErrorCodeDecoder = D.object({
        status: D.number,
    });
    public static testErrorCode(
        status: D.Output<typeof this.testErrorCodeDecoder>['status'],
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                'status': status,
            },
            decoders: {
                200: D.unknown,
                500: D.unknown,
                501: D.unknown,
                502: D.unknown,
                503: D.unknown,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/FormDataService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelWithString } from '../models/ModelWithString';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class FormDataService {
    private static postApiFormDataDecoder = D.object({
        parameter: D.optional(D.string),
        formData: D.optional(ModelWithString),
    });
    public static postApiFormData(
        parameter: D.Output<typeof this.postApiFormDataDecoder>['parameter'] = option.none,
        formData: D.Output<typeof this.postApiFormDataDecoder>['formData'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/formData/',
            query: {
                'parameter': parameter,
            },
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/HeaderService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class HeaderService {
    public static callWithResultFromHeader() {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            decoders: {
                200: D.string,
                400: D.unknown,
                500: D.unknown,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/MultipartService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelWithString } from '../models/ModelWithString';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipartService {
    private static multipartRequestDecoder = D.object({
        formData: D.optional(D.object({
            content: D.optional(D.createDecoder<Blob>({
                forceDecode: (data) => {
                    if (data instanceof Blob) {
                        return data;
                    }
                    throw new D.DecoderError('Expected Blob');
                },
            })),
            data: D.optional(D.nullable(D.oneOf(ModelWithString))),
        })),
    });
    public static multipartRequest(
        formData: D.Output<typeof this.multipartRequestDecoder>['formData'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/multipart',
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }
    public static multipartResponse() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multipart',
            decoders: {
                200: D.object({
                    file: D.optional(D.createDecoder<Blob>({
                        forceDecode: (data) => {
                            if (data instanceof Blob) {
                                return data;
                            }
                            throw new D.DecoderError('Expected Blob');
                        },
                    })),
                    metadata: D.optional(D.object({
                        foo: D.optional(D.string),
                        bar: D.optional(D.string),
                    })),
                }),
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/MultipleTags1Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags1Service {
    public static dummyA() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
    public static dummyB() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/MultipleTags2Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags2Service {
    public static dummyA() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
    public static dummyB() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/MultipleTags3Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags3Service {
    public static dummyB() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/NoContentService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class NoContentService {
    public static callWithNoContentResponse() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
            decoders: {
                204: D.succeed<void>(undefined),
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/ParametersService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelWithString } from '../models/ModelWithString';
import { Pageable } from '../models/Pageable';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ParametersService {
    private static callWithParametersDecoder = D.object({
        parameterHeader: D.nullable(D.string),
        parameterQuery: D.nullable(D.string),
        parameterForm: D.nullable(D.string),
        parameterCookie: D.nullable(D.string),
        parameterPath: D.nullable(D.string),
        requestBody: D.nullable(ModelWithString),
    });
    public static callWithParameters(
        parameterHeader: D.Output<typeof this.callWithParametersDecoder>['parameterHeader'],
        parameterQuery: D.Output<typeof this.callWithParametersDecoder>['parameterQuery'],
        parameterForm: D.Output<typeof this.callWithParametersDecoder>['parameterForm'],
        parameterCookie: D.Output<typeof this.callWithParametersDecoder>['parameterCookie'],
        parameterPath: D.Output<typeof this.callWithParametersDecoder>['parameterPath'],
        requestBody: D.Output<typeof this.callWithParametersDecoder>['requestBody'],
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                'parameterPath': parameterPath,
            },
            cookies: {
                'parameterCookie': parameterCookie,
            },
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
    private static callWithWeirdParameterNamesDecoder = D.object({
        parameterHeader: D.nullable(D.string),
        parameterQuery: D.nullable(D.string),
        parameterForm: D.nullable(D.string),
        parameterCookie: D.nullable(D.string),
        requestBody: D.nullable(ModelWithString),
        parameterPath1: D.optional(D.string),
        parameterPath2: D.optional(D.string),
        parameterPath3: D.optional(D.string),
        _default: D.optional(D.string),
    });
    public static callWithWeirdParameterNames(
        parameterHeader: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterHeader'],
        parameterQuery: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterQuery'],
        parameterForm: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterForm'],
        parameterCookie: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterCookie'],
        requestBody: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['requestBody'],
        parameterPath1: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterPath1'] = option.none,
        parameterPath2: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterPath2'] = option.none,
        parameterPath3: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['parameterPath3'] = option.none,
        _default: D.Output<typeof this.callWithWeirdParameterNamesDecoder>['_default'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            cookies: {
                'PARAMETER-COOKIE': parameterCookie,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                'default': _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                'parameter_form': parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
    private static getCallWithOptionalParamDecoder = D.object({
        requestBody: ModelWithString,
        parameter: D.optional(D.string),
    });
    public static getCallWithOptionalParam(
        requestBody: D.Output<typeof this.getCallWithOptionalParamDecoder>['requestBody'],
        parameter: D.Output<typeof this.getCallWithOptionalParamDecoder>['parameter'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/parameters/',
            query: {
                'parameter': parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
    private static postCallWithOptionalParamDecoder = D.object({
        parameter: Pageable,
        requestBody: D.optional(ModelWithString),
    });
    public static postCallWithOptionalParam(
        parameter: D.Output<typeof this.postCallWithOptionalParamDecoder>['parameter'],
        requestBody: D.Output<typeof this.postCallWithOptionalParamDecoder>['requestBody'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/',
            query: {
                'parameter': parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/RequestBodyService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelWithString } from '../models/ModelWithString';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class RequestBodyService {
    private static postApiRequestBodyDecoder = D.object({
        parameter: D.optional(D.string),
        requestBody: D.optional(ModelWithString),
    });
    public static postApiRequestBody(
        parameter: D.Output<typeof this.postApiRequestBodyDecoder>['parameter'] = option.none,
        requestBody: D.Output<typeof this.postApiRequestBodyDecoder>['requestBody'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/requestBody/',
            query: {
                'parameter': parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/ResponseService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { ModelThatExtends } from '../models/ModelThatExtends';
import { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import { ModelWithString } from '../models/ModelWithString';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ResponseService {
    public static callWithResponse() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
            decoders: {
                0: ModelWithString,
            },
        });
    }
    public static callWithDuplicateResponses() {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            decoders: {
                0: ModelWithString,
                201: ModelWithString,
                202: ModelWithString,
                500: ModelWithString,
                501: ModelWithString,
                502: ModelWithString,
            },
        });
    }
    public static callWithResponses() {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            decoders: {
                0: ModelWithString,
                200: D.object({
                    '@namespace.string': D.optional(D.string),
                    '@namespace.integer': D.optional(D.number),
                    value: D.optional(D.array(ModelWithString)),
                }),
                201: ModelThatExtends,
                202: ModelThatExtendsExtends,
                500: ModelWithString,
                501: ModelWithString,
                502: ModelWithString,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/SimpleService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class SimpleService {
    public static getCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }
    public static putCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }
    public static postCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }
    public static deleteCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }
    public static optionsCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }
    public static headCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }
    public static patchCallWithoutParametersAndResponse() {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/TypesService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class TypesService {
    private static typesDecoder = D.object({
        parameterArray: D.nullable(D.array(D.string)),
        parameterDictionary: D.nullable(D.record(D.unknown)),
        parameterEnum: D.nullable(D.literalUnion('Success', 'Warning', 'Error')),
        parameterNumber: D.number,
        parameterString: D.nullable(D.string),
        parameterBoolean: D.nullable(D.boolean),
        parameterObject: D.nullable(D.record(D.unknown)),
        id: D.optional(D.number),
    });
    public static types(
        parameterArray: D.Output<typeof this.typesDecoder>['parameterArray'],
        parameterDictionary: D.Output<typeof this.typesDecoder>['parameterDictionary'],
        parameterEnum: D.Output<typeof this.typesDecoder>['parameterEnum'],
        parameterNumber: D.Output<typeof this.typesDecoder>['parameterNumber'] = 123,
        parameterString: D.Output<typeof this.typesDecoder>['parameterString'] = 'default',
        parameterBoolean: D.Output<typeof this.typesDecoder>['parameterBoolean'] = true,
        parameterObject: D.Output<typeof this.typesDecoder>['parameterObject'] = option.none,
        id: D.Output<typeof this.typesDecoder>['id'] = option.none,
    ) {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                'id': id,
            },
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
            decoders: {
                200: D.number,
                201: D.string,
                202: D.boolean,
                203: D.record(D.unknown),
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/UploadService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import * as D from '@majkit/fp-ts-schema';
import { option } from 'fp-ts';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class UploadService {
    private static uploadFileDecoder = D.object({
        file: D.createDecoder<Blob>({
            forceDecode: (data) => {
                if (data instanceof Blob) {
                    return data;
                }
                throw new D.DecoderError('Expected Blob');
            },
        }),
    });
    public static uploadFile(
        file: D.Output<typeof this.uploadFileDecoder>['file'],
    ) {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/upload',
            formData: {
                'file': file,
            },
            decoders: {
                200: D.boolean,
            },
        });
    }
}
"
`;
